//职工管理系统可以用来管理公司内所有员工的信息
//
//本教程主要利用C++来实现一个基于多态的职工管理系统
//
//
//
//公司中职工分为三类：普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责
//
//普通员工职责：完成经理交给的任务
//
//经理职责：完成老板交给的任务，并下发任务给员工
//
//老板职责：管理公司所有事务
//
//
//
//管理系统中需要实现的功能如下：
//
//- 退出管理程序：退出当前管理系统
//
//- 增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门编号
//- 显示职工信息：显示公司内部所有职工的信息
//- 删除离职职工：按照编号删除指定的职工
//- 修改职工信息：按照编号修改职工个人信息
//- 查找职工信息：按照职工的编号或者职工的姓名进行查找相关的人员信息
//- 按照编号排序：按照职工编号，进行排序，排序规则由用户指定
//- 清空所有文档：清空文件中记录的所有职工信息 （清空前需要再次确认，防止误删）

#include <iostream>
#include "workerManager.h"
using namespace std;
int main()
{
	workerManager wm;
	int choice = 0;
	while(true){
	wm.show_menu();
	cout << "请输入您的选择:" << endl;
	cin >> choice;
	switch (choice) {
	case 0://退出系统
		wm.exit_system();
		break;
	case 1://添加职工
		break;
	case 2://显示职工信息
		break;
	case 3://删除职工
		break;
	case 4://修改职工
		break;
	case 5://查找职工
		break;
	case 6://排序
		break;
	case 7://清空
		break;
	default:
		system("cls");
		break;
	}
}
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
